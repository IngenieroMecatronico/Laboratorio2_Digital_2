
Prueba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000924  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080012c  0080012c  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001198  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000907  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a7  00000000  00000000  0000259b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  00003497  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  9e:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC1>:
//Subrutinas
//*********************************************************************************************


void InitADC1(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	80 83       	st	Z, r24
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR);
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24
	//Apagamos la salida digital de PINC2
	DIDR0 |= (1 << ADC2D);
  bc:	ae e7       	ldi	r26, 0x7E	; 126
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	8c 91       	ld	r24, X
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	8c 93       	st	X, r24
	//Configuración del canal 0 ya que allí esta mi potenciómetro.
	ADMUX |= (1 << MUX1);
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2);
  cc:	80 81       	ld	r24, Z
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	80 83       	st	Z, r24
	ADCSRA = 0;
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	10 82       	st	Z, r1
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
  de:	80 81       	ld	r24, Z
  e0:	87 60       	ori	r24, 0x07	; 7
  e2:	80 83       	st	Z, r24
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <InitADC2>:
	
}


void InitADC2(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
  ec:	ec e7       	ldi	r30, 0x7C	; 124
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  f6:	80 81       	ld	r24, Z
  f8:	8f 77       	andi	r24, 0x7F	; 127
  fa:	80 83       	st	Z, r24
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR);
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
	//Apagamos la salida digital de PINC3
	DIDR0 |= (1 << ADC4D);
 102:	ae e7       	ldi	r26, 0x7E	; 126
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8c 91       	ld	r24, X
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	8c 93       	st	X, r24
	//Configuración del canal 3 ya que allí esta mi potenciómetro.
	ADMUX |= (1 << MUX2);
 10c:	80 81       	ld	r24, Z
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1);
 112:	80 81       	ld	r24, Z
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	80 83       	st	Z, r24
	ADCSRA = 0;
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
 11e:	80 81       	ld	r24, Z
 120:	88 60       	ori	r24, 0x08	; 8
 122:	80 83       	st	Z, r24
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 124:	80 81       	ld	r24, Z
 126:	87 60       	ori	r24, 0x07	; 7
 128:	80 83       	st	Z, r24
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
 12a:	80 81       	ld	r24, Z
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <valorpot>:
	
	
}

void valorpot(uint8_t numpot, uint8_t valoradc){
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c8 2f       	mov	r28, r24
	uint8_t entero, primdecimal, segdecimal, prueba;
	uint16_t numero;
	prueba = ADCH;
 144:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	ADMUX = (ADMUX & 0xF0);
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	80 83       	st	Z, r24
	if (numpot == 2)
 152:	c2 30       	cpi	r28, 0x02	; 2
 154:	09 f0       	breq	.+2      	; 0x158 <valorpot+0x26>
 156:	59 c0       	rjmp	.+178    	; 0x20a <valorpot+0xd8>
	{
		//Este potenciómetro controla solo la primera casilla de la pantalla.
		ADMUX = (ADMUX & 0xF0) | numpot; //0b0000 0010
 158:	80 81       	ld	r24, Z
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	8c 2b       	or	r24, r28
 15e:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADSC);
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
		//Conversión de 255-0 y 500-0
		numero = 1.96*prueba;
 16a:	6d 2f       	mov	r22, r29
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 88 03 	call	0x710	; 0x710 <__floatsisf>
 176:	28 e4       	ldi	r18, 0x48	; 72
 178:	31 ee       	ldi	r19, 0xE1	; 225
 17a:	4a ef       	ldi	r20, 0xFA	; 250
 17c:	5f e3       	ldi	r21, 0x3F	; 63
 17e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__mulsf3>
 182:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixunssfsi>
 186:	6b 01       	movw	r12, r22
 188:	7c 01       	movw	r14, r24
		//Clasificación de los valores:
		entero = (numero)/100;
 18a:	9b 01       	movw	r18, r22
 18c:	36 95       	lsr	r19
 18e:	27 95       	ror	r18
 190:	36 95       	lsr	r19
 192:	27 95       	ror	r18
 194:	ab e7       	ldi	r26, 0x7B	; 123
 196:	b4 e1       	ldi	r27, 0x14	; 20
 198:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 19c:	ac 01       	movw	r20, r24
 19e:	56 95       	lsr	r21
 1a0:	47 95       	ror	r20
		primdecimal = (numero - (entero)*100)/10;
 1a2:	5c e9       	ldi	r21, 0x9C	; 156
 1a4:	54 03       	mulsu	r21, r20
 1a6:	90 01       	movw	r18, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2c 0d       	add	r18, r12
 1ac:	3d 1d       	adc	r19, r13
 1ae:	ad ec       	ldi	r26, 0xCD	; 205
 1b0:	bc ec       	ldi	r27, 0xCC	; 204
 1b2:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 1b6:	8c 01       	movw	r16, r24
 1b8:	16 95       	lsr	r17
 1ba:	07 95       	ror	r16
 1bc:	16 95       	lsr	r17
 1be:	07 95       	ror	r16
 1c0:	16 95       	lsr	r17
 1c2:	07 95       	ror	r16
		segdecimal = (numero - (entero*100)-(primdecimal*10));
 1c4:	60 2f       	mov	r22, r16
 1c6:	66 0f       	add	r22, r22
 1c8:	96 2f       	mov	r25, r22
 1ca:	99 0f       	add	r25, r25
 1cc:	99 0f       	add	r25, r25
 1ce:	69 0f       	add	r22, r25
 1d0:	61 95       	neg	r22
 1d2:	54 9f       	mul	r21, r20
 1d4:	60 0d       	add	r22, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	c6 0e       	add	r12, r22
		//Está llegando hasta 2.43
		LCD_Write_Char(entero+48);
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	84 0f       	add	r24, r20
 1de:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
		//LCD_Write_Char(entero+48);
		LCD_Write_Char('.');
 1e2:	8e e2       	ldi	r24, 0x2E	; 46
 1e4:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
		LCD_Write_Char(primdecimal+48);
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	80 0f       	add	r24, r16
 1ec:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
		LCD_Write_Char(segdecimal+48);
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	8c 0d       	add	r24, r12
 1f4:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	81 ee       	ldi	r24, 0xE1	; 225
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <valorpot+0xcc>
 206:	00 c0       	rjmp	.+0      	; 0x208 <valorpot+0xd6>
 208:	00 00       	nop
		_delay_ms(100);	
	}
	if (numpot == 4)
 20a:	c4 30       	cpi	r28, 0x04	; 4
 20c:	09 f0       	breq	.+2      	; 0x210 <valorpot+0xde>
 20e:	5c c0       	rjmp	.+184    	; 0x2c8 <valorpot+0x196>
	{
		ADMUX = (ADMUX & 0xF0) | numpot; //0b0000 0100;
 210:	ec e7       	ldi	r30, 0x7C	; 124
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	c8 2b       	or	r28, r24
 21a:	c0 83       	st	Z, r28
		ADCSRA |= (1<<ADSC);
 21c:	ea e7       	ldi	r30, 0x7A	; 122
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 64       	ori	r24, 0x40	; 64
 224:	80 83       	st	Z, r24
		numero = 1.96*prueba;
 226:	6d 2f       	mov	r22, r29
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 88 03 	call	0x710	; 0x710 <__floatsisf>
 232:	28 e4       	ldi	r18, 0x48	; 72
 234:	31 ee       	ldi	r19, 0xE1	; 225
 236:	4a ef       	ldi	r20, 0xFA	; 250
 238:	5f e3       	ldi	r21, 0x3F	; 63
 23a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__mulsf3>
 23e:	0e 94 57 03 	call	0x6ae	; 0x6ae <__fixunssfsi>
 242:	6b 01       	movw	r12, r22
 244:	7c 01       	movw	r14, r24
		//Clasificación de los valores:
		entero = (numero)/100;
 246:	9b 01       	movw	r18, r22
 248:	36 95       	lsr	r19
 24a:	27 95       	ror	r18
 24c:	36 95       	lsr	r19
 24e:	27 95       	ror	r18
 250:	ab e7       	ldi	r26, 0x7B	; 123
 252:	b4 e1       	ldi	r27, 0x14	; 20
 254:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 258:	ac 01       	movw	r20, r24
 25a:	56 95       	lsr	r21
 25c:	47 95       	ror	r20
		primdecimal = (numero - (entero)*100)/10;
 25e:	5c e9       	ldi	r21, 0x9C	; 156
 260:	54 03       	mulsu	r21, r20
 262:	90 01       	movw	r18, r0
 264:	11 24       	eor	r1, r1
 266:	2c 0d       	add	r18, r12
 268:	3d 1d       	adc	r19, r13
 26a:	ad ec       	ldi	r26, 0xCD	; 205
 26c:	bc ec       	ldi	r27, 0xCC	; 204
 26e:	0e 94 81 04 	call	0x902	; 0x902 <__umulhisi3>
 272:	ec 01       	movw	r28, r24
 274:	d6 95       	lsr	r29
 276:	c7 95       	ror	r28
 278:	d6 95       	lsr	r29
 27a:	c7 95       	ror	r28
 27c:	d6 95       	lsr	r29
 27e:	c7 95       	ror	r28
		segdecimal = (numero - (entero*100)-(primdecimal*10));
 280:	6c 2f       	mov	r22, r28
 282:	66 0f       	add	r22, r22
 284:	96 2f       	mov	r25, r22
 286:	99 0f       	add	r25, r25
 288:	99 0f       	add	r25, r25
 28a:	69 0f       	add	r22, r25
 28c:	61 95       	neg	r22
 28e:	54 9f       	mul	r21, r20
 290:	60 0d       	add	r22, r0
 292:	11 24       	eor	r1, r1
 294:	16 2f       	mov	r17, r22
 296:	1c 0d       	add	r17, r12
		
		LCD_Write_Char(entero+48);
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	84 0f       	add	r24, r20
 29c:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
		LCD_Write_Char('.');
 2a0:	8e e2       	ldi	r24, 0x2E	; 46
 2a2:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
		LCD_Write_Char(primdecimal+48);
 2a6:	8c 2f       	mov	r24, r28
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
		LCD_Write_Char(segdecimal+48);
 2ae:	80 e3       	ldi	r24, 0x30	; 48
 2b0:	81 0f       	add	r24, r17
 2b2:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	81 ee       	ldi	r24, 0xE1	; 225
 2ba:	94 e0       	ldi	r25, 0x04	; 4
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <valorpot+0x18a>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <valorpot+0x194>
 2c6:	00 00       	nop
		_delay_ms(100);
	}
	while (ADCSRA & (1 << ADSC));
 2c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2cc:	86 fd       	sbrc	r24, 6
 2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <valorpot+0x196>
	return ADC;
 2d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 2d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	08 95       	ret

000002ea <WriteTextUART>:

void WriteTextUART(char * Texto){
 2ea:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <WriteTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)) );
 2f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f4:	95 ff       	sbrs	r25, 5
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <WriteTextUART+0x6>
		UDR0 = Texto[i];
 2f8:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return ADC;
}

void WriteTextUART(char * Texto){
	uint8_t i;
	for (i=0; Texto[i]!= '\0'; i++){
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	fa 01       	movw	r30, r20
 300:	e2 0f       	add	r30, r18
 302:	f1 1d       	adc	r31, r1
 304:	30 81       	ld	r19, Z
 306:	31 11       	cpse	r19, r1
 308:	f3 cf       	rjmp	.-26     	; 0x2f0 <WriteTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)) );
		UDR0 = Texto[i];
	}
}
 30a:	08 95       	ret

0000030c <writeUART>:

void writeUART(char Caracter){
	while(!(UCSR0A & (1<<UDRE0)));
 30c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 310:	95 ff       	sbrs	r25, 5
 312:	fc cf       	rjmp	.-8      	; 0x30c <writeUART>
	UDR0 = Caracter;
 314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 318:	08 95       	ret

0000031a <main>:
volatile uint8_t BufferTX;		  //Variable doonde se guarda el valor leído.
volatile uint8_t datorecibido;	  //Variable para mantener el dato recibido.

int main(void)
{
	initUart9600();   //Inicializo mi TX y RX pero lo usaré a 115200
 31a:	0e 94 3c 03 	call	0x678	; 0x678 <initUart9600>
	sei();			  //Habilito las interrupciones globales
 31e:	78 94       	sei
	InitADC1();		  //Inicio mi ADC.
 320:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC1>
	InitADC2();		  //Inicio mi ADC.
 324:	0e 94 76 00 	call	0xec	; 0xec <InitADC2>
	initLDC8bit();	  //Inicio mi Pantalla.
 328:	0e 94 b0 02 	call	0x560	; 0x560 <initLDC8bit>
	LCD_CMD(0x01);	  //Configuración para encendido.
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_CMD>
	LCD_CMD(0x06);
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_CMD>
	LCD_Set_Cursor(0,1);	//Posicionamiento en la columna 0, fila 1.
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
	LCD_write_String("S1:  S2:  S3:"); //Escribo el encabezado de mis valores.
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_write_String>
	BufferTX = 0;						//Limpio mi variable donde recibo los datos de UART.
 348:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <BufferTX>
	contador = 0;						//Inicializo mi contador.
 34c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
    while (1) 
    {
		ADCSRA |= (1<<ADSC);   //Habilito la interrupcion de ADC.
 350:	ea e7       	ldi	r30, 0x7A	; 122
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 64       	ori	r24, 0x40	; 64
 358:	80 83       	st	Z, r24
		LCD_Set_Cursor(0,2);   //Posicionamiento en la columna 0, fila 2.
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
		valorpot(2, valoradc); //Llamo a mi función para enviar mi valor ADC y que imprima lo del pot del ADC2.
 362:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <valoradc>
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 99 00 	call	0x132	; 0x132 <valorpot>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	81 ee       	ldi	r24, 0xE1	; 225
 370:	94 e0       	ldi	r25, 0x04	; 4
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x58>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x62>
 37c:	00 00       	nop
		_delay_ms(100);		   //Retraso de 100 ms.
		LCD_Set_Cursor(5,2);   //Posicionamiento en la columna 5, fila 2.
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	85 e0       	ldi	r24, 0x05	; 5
 382:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
		valorpot(4, valoradc); //Llamo a mi función para enviar mi valor ADC y que imprima lo del pot del ADC4.
 386:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <valoradc>
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	0e 94 99 00 	call	0x132	; 0x132 <valorpot>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	81 ee       	ldi	r24, 0xE1	; 225
 394:	94 e0       	ldi	r25, 0x04	; 4
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x7c>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x86>
 3a0:	00 00       	nop
		_delay_ms(100);
		LCD_Set_Cursor(11,2);  //Posicionamiento en la columna 11, fila 2.
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	8b e0       	ldi	r24, 0x0B	; 11
 3a6:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
		datorecibido = BufferTX;//Recibo el BUFFER o lo leído del UART y lo almaceno.
 3aa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <BufferTX>
 3ae:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <datorecibido>
		//writeUART(BufferTX);
		switch(datorecibido){
 3b2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <datorecibido>
 3b6:	8b 32       	cpi	r24, 0x2B	; 43
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <main+0xa6>
 3ba:	8d 32       	cpi	r24, 0x2D	; 45
 3bc:	19 f1       	breq	.+70     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3be:	43 c0       	rjmp	.+134    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				case 43:		//Si recibí un más, imprimo en la hiperterminal el contador en ASCII +1.
				LCD_Set_Cursor(11,2);//Seteo posición de nuevo.
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	8b e0       	ldi	r24, 0x0B	; 11
 3c4:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
				contador++;
 3c8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
				//LCD_Write_Char(contador);
				WriteTextUART("Entro_a_suma");
 3d2:	8e e0       	ldi	r24, 0x0E	; 14
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	0e 94 75 01 	call	0x2ea	; 0x2ea <WriteTextUART>
				WriteTextUART("\n\r");
 3da:	8b e1       	ldi	r24, 0x1B	; 27
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 75 01 	call	0x2ea	; 0x2ea <WriteTextUART>
				writeUART(contador+48);
 3e2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	0e 94 86 01 	call	0x30c	; 0x30c <writeUART>
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	81 ee       	ldi	r24, 0xE1	; 225
 3f0:	94 e0       	ldi	r25, 0x04	; 4
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0xd8>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0xe2>
 3fc:	00 00       	nop
				//_delay_ms(100);
				//LCD_Write_Char(contador+48);
				_delay_ms(100);
				BufferTX = 0;
 3fe:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <BufferTX>
				break;
 402:	21 c0       	rjmp	.+66     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				case 45://Si recibí un menos, imprimo en la hiperterminal el contador en ASCII -1.
				LCD_Set_Cursor(11,2);
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	8b e0       	ldi	r24, 0x0B	; 11
 408:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
				WriteTextUART("Entro_a_resta");
 40c:	8e e1       	ldi	r24, 0x1E	; 30
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 75 01 	call	0x2ea	; 0x2ea <WriteTextUART>
				WriteTextUART("\n\r");
 414:	8b e1       	ldi	r24, 0x1B	; 27
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 75 01 	call	0x2ea	; 0x2ea <WriteTextUART>
				writeUART(contador+48);
 41c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 420:	80 5d       	subi	r24, 0xD0	; 208
 422:	0e 94 86 01 	call	0x30c	; 0x30c <writeUART>
				contador--;
 426:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 42a:	81 50       	subi	r24, 0x01	; 1
 42c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	81 ee       	ldi	r24, 0xE1	; 225
 434:	94 e0       	ldi	r25, 0x04	; 4
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
				_delay_ms(100);
				BufferTX = 0;
 442:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <BufferTX>
				break;
		}
		LCD_Set_Cursor(11,2); //Seteo el punto.
 446:	62 e0       	ldi	r22, 0x02	; 2
 448:	8b e0       	ldi	r24, 0x0B	; 11
 44a:	0e 94 32 03 	call	0x664	; 0x664 <LCD_Set_Cursor>
		LCD_Write_Char(contador+48); //Imprimo en la LCD el ASCII del contador +1.
 44e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 452:	80 5d       	subi	r24, 0xD0	; 208
 454:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
 458:	2f ef       	ldi	r18, 0xFF	; 255
 45a:	81 ee       	ldi	r24, 0xE1	; 225
 45c:	94 e0       	ldi	r25, 0x04	; 4
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	72 cf       	rjmp	.-284    	; 0x350 <main+0x36>

0000046c <__vector_21>:

//Revisar ya que me tira valores raros, ver si es por que no requiere la conversión del mapeo diferente.
//*****************************************************************************************************************************************
//ISR interrupciones:
//*****************************************************************************************************************************************
ISR(ADC_vect){
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	8f 93       	push	r24
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
	valoradc = ADCH;
 47c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 480:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <valoradc>
	ADCSRA |= (1<<ADIF); // Apaga la bandera de interrupción del ADC
 484:	ea e7       	ldi	r30, 0x7A	; 122
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	80 61       	ori	r24, 0x10	; 16
 48c:	80 83       	st	Z, r24
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	8f 91       	pop	r24
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <__vector_18>:

ISR(USART_RX_vect){  //uint8_t bit2; //Interrupción para obtener los valores de UDR0 en BUFFERTX.
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	8f 93       	push	r24
	BufferTX = UDR0;
 4aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4ae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <BufferTX>
	while(!(UCSR0A & (1<<UDRE0)));
 4b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4b6:	85 ff       	sbrs	r24, 5
 4b8:	fc cf       	rjmp	.-8      	; 0x4b2 <__vector_18+0x14>
	UDR0 = BufferTX;
 4ba:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <BufferTX>
 4be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 4c2:	8f 91       	pop	r24
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <LCD_Port>:
	PORTB &= ~(1<<PORTB5);
	_delay_ms(50);
}

void LCD_Port(char a){
	if(a & 1){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 4ce:	80 ff       	sbrs	r24, 0
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <LCD_Port+0xc>
		//PD0 = 1;
		PORTC |= (1<<PORTC0);
 4d2:	98 b1       	in	r25, 0x08	; 8
 4d4:	91 60       	ori	r25, 0x01	; 1
 4d6:	98 b9       	out	0x08, r25	; 8
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <LCD_Port+0x12>
	}
	else{
		PORTC &= ~(1<<PORTC0);
 4da:	98 b1       	in	r25, 0x08	; 8
 4dc:	9e 7f       	andi	r25, 0xFE	; 254
 4de:	98 b9       	out	0x08, r25	; 8
	}
	if(a & 2){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 4e0:	81 ff       	sbrs	r24, 1
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <LCD_Port+0x1e>
		//PD0 = 1;
		PORTC |= (1<<PORTC1);
 4e4:	98 b1       	in	r25, 0x08	; 8
 4e6:	92 60       	ori	r25, 0x02	; 2
 4e8:	98 b9       	out	0x08, r25	; 8
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <LCD_Port+0x24>
	}
	else{
		PORTC &= ~(1<<PORTC1);
 4ec:	98 b1       	in	r25, 0x08	; 8
 4ee:	9d 7f       	andi	r25, 0xFD	; 253
 4f0:	98 b9       	out	0x08, r25	; 8
	}
	if(a & 4){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 4f2:	82 ff       	sbrs	r24, 2
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <LCD_Port+0x30>
		//PD0 = 1;
		PORTD |= (1<<PORTD2);
 4f6:	9b b1       	in	r25, 0x0b	; 11
 4f8:	94 60       	ori	r25, 0x04	; 4
 4fa:	9b b9       	out	0x0b, r25	; 11
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <LCD_Port+0x36>
	}
	else{
		PORTD &= ~(1<<PORTD2);
 4fe:	9b b1       	in	r25, 0x0b	; 11
 500:	9b 7f       	andi	r25, 0xFB	; 251
 502:	9b b9       	out	0x0b, r25	; 11
	}
	if(a & 8){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 504:	83 ff       	sbrs	r24, 3
 506:	04 c0       	rjmp	.+8      	; 0x510 <LCD_Port+0x42>
		//PD0 = 1;
		PORTD |= (1<<PORTD3);
 508:	9b b1       	in	r25, 0x0b	; 11
 50a:	98 60       	ori	r25, 0x08	; 8
 50c:	9b b9       	out	0x0b, r25	; 11
 50e:	03 c0       	rjmp	.+6      	; 0x516 <LCD_Port+0x48>
	}
	else {
		PORTD &= ~(1<<PORTD3);
 510:	9b b1       	in	r25, 0x0b	; 11
 512:	97 7f       	andi	r25, 0xF7	; 247
 514:	9b b9       	out	0x0b, r25	; 11
	}
	if(a & 16){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 516:	84 ff       	sbrs	r24, 4
 518:	04 c0       	rjmp	.+8      	; 0x522 <LCD_Port+0x54>
		//PD0 = 1;
		PORTD |= (1<<PORTD4);
 51a:	9b b1       	in	r25, 0x0b	; 11
 51c:	90 61       	ori	r25, 0x10	; 16
 51e:	9b b9       	out	0x0b, r25	; 11
 520:	03 c0       	rjmp	.+6      	; 0x528 <LCD_Port+0x5a>
	}
	else {
		PORTD &= ~(1<<PORTD4);
 522:	9b b1       	in	r25, 0x0b	; 11
 524:	9f 7e       	andi	r25, 0xEF	; 239
 526:	9b b9       	out	0x0b, r25	; 11
	}
	if(a & 32){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 528:	85 ff       	sbrs	r24, 5
 52a:	04 c0       	rjmp	.+8      	; 0x534 <LCD_Port+0x66>
		//PD0 = 1;
		PORTD |= (1<<PORTD5);
 52c:	9b b1       	in	r25, 0x0b	; 11
 52e:	90 62       	ori	r25, 0x20	; 32
 530:	9b b9       	out	0x0b, r25	; 11
 532:	03 c0       	rjmp	.+6      	; 0x53a <LCD_Port+0x6c>
	}
	else{
		PORTD &= ~(1<<PORTD5);
 534:	9b b1       	in	r25, 0x0b	; 11
 536:	9f 7d       	andi	r25, 0xDF	; 223
 538:	9b b9       	out	0x0b, r25	; 11
	}
	if(a & 64){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 53a:	86 ff       	sbrs	r24, 6
 53c:	04 c0       	rjmp	.+8      	; 0x546 <LCD_Port+0x78>
		//PD0 = 1;
		PORTD |= (1<<PORTD6);
 53e:	9b b1       	in	r25, 0x0b	; 11
 540:	90 64       	ori	r25, 0x40	; 64
 542:	9b b9       	out	0x0b, r25	; 11
 544:	03 c0       	rjmp	.+6      	; 0x54c <LCD_Port+0x7e>
	}
	else{
		PORTD &= ~(1<<PORTD6);
 546:	9b b1       	in	r25, 0x0b	; 11
 548:	9f 7b       	andi	r25, 0xBF	; 191
 54a:	9b b9       	out	0x0b, r25	; 11
	}
	if(a & 128){ //Tengo que ir asignando los valores del contador binario a cada bit de la LCD.
 54c:	88 23       	and	r24, r24
 54e:	24 f4       	brge	.+8      	; 0x558 <LCD_Port+0x8a>
		//PD0 = 1;
		PORTD |= (1<<PORTD7);
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	80 68       	ori	r24, 0x80	; 128
 554:	8b b9       	out	0x0b, r24	; 11
 556:	08 95       	ret
	}
	else {
		PORTD &= ~(1<<PORTD7);
 558:	8b b1       	in	r24, 0x0b	; 11
 55a:	8f 77       	andi	r24, 0x7F	; 127
 55c:	8b b9       	out	0x0b, r24	; 11
 55e:	08 95       	ret

00000560 <initLDC8bit>:

volatile uint8_t BufferTX;

void initLDC8bit(void){
	//Establezco que mi puerto D será salidas.
	DDRD = 0xFF;
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	8a b9       	out	0x0a, r24	; 10
	//Apago mi puerto D.
	PORTD = 0;
 564:	1b b8       	out	0x0b, r1	; 11
	//Establezco que mi puerto B serán entradas excepto PB0 y PB5.
	DDRB = 0;
 566:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<PORTB0)|(1<<PORTB5);
 568:	84 b1       	in	r24, 0x04	; 4
 56a:	81 62       	ori	r24, 0x21	; 33
 56c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 56e:	15 b8       	out	0x05, r1	; 5
	//Establezco el puerto C como 2 salidas y el resto entradas.
	DDRC = 0x03;
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	87 b9       	out	0x07, r24	; 7
	//Apago mi puerto C.
	PORTC = 0;
 574:	18 b8       	out	0x08, r1	; 8
	//Función de encendido.
	LCD_Port(0x00); //Inicializo mi pantalla.
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	89 ef       	ldi	r24, 0xF9	; 249
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <initLDC8bit+0x22>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <initLDC8bit+0x2c>
 58c:	00 00       	nop
	LCD_Port(0x30); //Se manda un uno a PD4 y PD5.
	_delay_ms(20);  //Espero luego de haber encendido a pantalla.
	*/
	_delay_ms(20);
	//Funcion set:
	LCD_Port(0x38); //Se manda un uno a PD3-PD5.
 58e:	88 e3       	ldi	r24, 0x38	; 56
 590:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 594:	25 e0       	ldi	r18, 0x05	; 5
 596:	2a 95       	dec	r18
 598:	f1 f7       	brne	.-4      	; 0x596 <initLDC8bit+0x36>
 59a:	00 00       	nop
	_delay_us(1);
	//Display on/off
	LCD_Port(0b00001100);
 59c:	8c e0       	ldi	r24, 0x0C	; 12
 59e:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
 5a2:	85 e0       	ldi	r24, 0x05	; 5
 5a4:	8a 95       	dec	r24
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <initLDC8bit+0x44>
 5a8:	00 00       	nop
	_delay_us(1);
	//Entry mode:
	LCD_Port(0x06);
 5aa:	86 e0       	ldi	r24, 0x06	; 6
 5ac:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
 5b0:	95 e0       	ldi	r25, 0x05	; 5
 5b2:	9a 95       	dec	r25
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <initLDC8bit+0x52>
 5b6:	00 00       	nop
	_delay_us(1);
	//Clear Display:
	LCD_Port(0x01);
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5be:	8f e1       	ldi	r24, 0x1F	; 31
 5c0:	9e e4       	ldi	r25, 0x4E	; 78
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <initLDC8bit+0x62>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <initLDC8bit+0x68>
 5c8:	00 00       	nop
 5ca:	08 95       	ret

000005cc <LCD_CMD>:
	_delay_ms(5);
	//Ya inicializamos la pantalla.
}

void LCD_CMD(char a){
	PORTB &= ~(1<<PORTB0);  // configuro mi valor de RS = 0, para que lo interprete como comando.
 5cc:	95 b1       	in	r25, 0x05	; 5
 5ce:	9e 7f       	andi	r25, 0xFE	; 254
 5d0:	95 b9       	out	0x05, r25	; 5
	LCD_Port(a);
 5d2:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
	//Enable en 1.
	PORTB |= (1<<PORTB5);
 5d6:	85 b1       	in	r24, 0x05	; 5
 5d8:	80 62       	ori	r24, 0x20	; 32
 5da:	85 b9       	out	0x05, r24	; 5
 5dc:	8f e7       	ldi	r24, 0x7F	; 127
 5de:	9e e3       	ldi	r25, 0x3E	; 62
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_CMD+0x14>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_CMD+0x1a>
 5e6:	00 00       	nop
	_delay_ms(4);
	//Vuelvo a apagar el enable.
	PORTB &= ~(1<<PORTB5);
 5e8:	85 b1       	in	r24, 0x05	; 5
 5ea:	8f 7d       	andi	r24, 0xDF	; 223
 5ec:	85 b9       	out	0x05, r24	; 5
 5ee:	9f ef       	ldi	r25, 0xFF	; 255
 5f0:	20 e7       	ldi	r18, 0x70	; 112
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	20 40       	sbci	r18, 0x00	; 0
 5f8:	80 40       	sbci	r24, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <LCD_CMD+0x28>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_CMD+0x32>
 5fe:	00 00       	nop
 600:	08 95       	ret

00000602 <LCD_Write_Char>:
void LCD_Write_Char(char c){
	char Ccaracter;
	Ccaracter = c;
	
	//Establezco mi RS en 1.
	PORTB |= (1<<PORTB0);
 602:	95 b1       	in	r25, 0x05	; 5
 604:	91 60       	ori	r25, 0x01	; 1
 606:	95 b9       	out	0x05, r25	; 5
	LCD_Port(Ccaracter);
 608:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_Port>
	//Enciendo mi Enable.
	PORTB |= (1<<PORTB5);
 60c:	85 b1       	in	r24, 0x05	; 5
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	85 b9       	out	0x05, r24	; 5
 612:	8f e7       	ldi	r24, 0x7F	; 127
 614:	9e e3       	ldi	r25, 0x3E	; 62
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <LCD_Write_Char+0x14>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <LCD_Write_Char+0x1a>
 61c:	00 00       	nop
	_delay_ms(4);
	//Apago mi Enable.
	PORTB &= ~(1<<PORTB5);
 61e:	85 b1       	in	r24, 0x05	; 5
 620:	8f 7d       	andi	r24, 0xDF	; 223
 622:	85 b9       	out	0x05, r24	; 5
 624:	9f ef       	ldi	r25, 0xFF	; 255
 626:	20 e7       	ldi	r18, 0x70	; 112
 628:	82 e0       	ldi	r24, 0x02	; 2
 62a:	91 50       	subi	r25, 0x01	; 1
 62c:	20 40       	sbci	r18, 0x00	; 0
 62e:	80 40       	sbci	r24, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <LCD_Write_Char+0x28>
 632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_Write_Char+0x32>
 634:	00 00       	nop
 636:	08 95       	ret

00000638 <LCD_write_String>:
	_delay_ms(50);
	
}

//Función para enviar una cadena.
void LCD_write_String(char *a){
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	8c 01       	movw	r16, r24
	int i;
	for (i = 0; a[i] != '\0'; i++)
 642:	c0 e0       	ldi	r28, 0x00	; 0
 644:	d0 e0       	ldi	r29, 0x00	; 0
 646:	03 c0       	rjmp	.+6      	; 0x64e <LCD_write_String+0x16>
	{
		LCD_Write_Char(a[i]);
 648:	0e 94 01 03 	call	0x602	; 0x602 <LCD_Write_Char>
}

//Función para enviar una cadena.
void LCD_write_String(char *a){
	int i;
	for (i = 0; a[i] != '\0'; i++)
 64c:	21 96       	adiw	r28, 0x01	; 1
 64e:	f8 01       	movw	r30, r16
 650:	ec 0f       	add	r30, r28
 652:	fd 1f       	adc	r31, r29
 654:	80 81       	ld	r24, Z
 656:	81 11       	cpse	r24, r1
 658:	f7 cf       	rjmp	.-18     	; 0x648 <LCD_write_String+0x10>
	{
		LCD_Write_Char(a[i]);
	}
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	0f 91       	pop	r16
 662:	08 95       	ret

00000664 <LCD_Set_Cursor>:

//Función para colocar el cursor:
void LCD_Set_Cursor(char x, char y){
	char pos;
	if (y == 1)
 664:	61 30       	cpi	r22, 0x01	; 1
 666:	21 f4       	brne	.+8      	; 0x670 <LCD_Set_Cursor+0xc>
	{
		pos = (0x80 + x);
		LCD_CMD(pos);
 668:	80 58       	subi	r24, 0x80	; 128
 66a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_CMD>
 66e:	08 95       	ret
	}
	else {
		pos = (0xC0 + x);
		LCD_CMD(pos);
 670:	80 54       	subi	r24, 0x40	; 64
 672:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_CMD>
 676:	08 95       	ret

00000678 <initUart9600>:
	}
}
//Inicialización del uart.
void initUart9600(void){
	//Paso 1: RX como entrada y TX como salida.
	DDRD |= (1<<DDD1);
 678:	8a b1       	in	r24, 0x0a	; 10
 67a:	82 60       	ori	r24, 0x02	; 2
 67c:	8a b9       	out	0x0a, r24	; 10
	DDRD &=	~(1<<DDD0);
 67e:	8a b1       	in	r24, 0x0a	; 10
 680:	8e 7f       	andi	r24, 0xFE	; 254
 682:	8a b9       	out	0x0a, r24	; 10
	//Paso 2: Configurar UCSR0A
	UCSR0A = 0;
 684:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Paso 3: Configurar UCSR0B: habilitamos ISR de recepción y RX Y TX.
	UCSR0B = 0;
 688:	e1 ec       	ldi	r30, 0xC1	; 193
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0); //Estoy activando la bandera que me indica que se recibió el mensaje.
 68e:	80 81       	ld	r24, Z
 690:	88 69       	ori	r24, 0x98	; 152
 692:	80 83       	st	Z, r24
	//Paso 4: COnfigurar UCSR0C: Primero asíncrono, sin pariedad, bit 1 de stop, Data bits/ 8 bits,
	UCSR0C = 0;
 694:	e2 ec       	ldi	r30, 0xC2	; 194
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 69a:	80 81       	ld	r24, Z
 69c:	86 60       	ori	r24, 0x06	; 6
 69e:	80 83       	st	Z, r24
	//Paso 5: Configurar velocidad de Baudrate: 115200
	UBRR0 = 8;
 6a0:	88 e0       	ldi	r24, 0x08	; 8
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 6ac:	08 95       	ret

000006ae <__fixunssfsi>:
 6ae:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_splitA>
 6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__fixunssfsi+0x28>
 6b4:	9f 57       	subi	r25, 0x7F	; 127
 6b6:	98 f0       	brcs	.+38     	; 0x6de <__fixunssfsi+0x30>
 6b8:	b9 2f       	mov	r27, r25
 6ba:	99 27       	eor	r25, r25
 6bc:	b7 51       	subi	r27, 0x17	; 23
 6be:	b0 f0       	brcs	.+44     	; 0x6ec <__fixunssfsi+0x3e>
 6c0:	e1 f0       	breq	.+56     	; 0x6fa <__fixunssfsi+0x4c>
 6c2:	66 0f       	add	r22, r22
 6c4:	77 1f       	adc	r23, r23
 6c6:	88 1f       	adc	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	1a f0       	brmi	.+6      	; 0x6d2 <__fixunssfsi+0x24>
 6cc:	ba 95       	dec	r27
 6ce:	c9 f7       	brne	.-14     	; 0x6c2 <__fixunssfsi+0x14>
 6d0:	14 c0       	rjmp	.+40     	; 0x6fa <__fixunssfsi+0x4c>
 6d2:	b1 30       	cpi	r27, 0x01	; 1
 6d4:	91 f0       	breq	.+36     	; 0x6fa <__fixunssfsi+0x4c>
 6d6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_zero>
 6da:	b1 e0       	ldi	r27, 0x01	; 1
 6dc:	08 95       	ret
 6de:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_zero>
 6e2:	67 2f       	mov	r22, r23
 6e4:	78 2f       	mov	r23, r24
 6e6:	88 27       	eor	r24, r24
 6e8:	b8 5f       	subi	r27, 0xF8	; 248
 6ea:	39 f0       	breq	.+14     	; 0x6fa <__fixunssfsi+0x4c>
 6ec:	b9 3f       	cpi	r27, 0xF9	; 249
 6ee:	cc f3       	brlt	.-14     	; 0x6e2 <__fixunssfsi+0x34>
 6f0:	86 95       	lsr	r24
 6f2:	77 95       	ror	r23
 6f4:	67 95       	ror	r22
 6f6:	b3 95       	inc	r27
 6f8:	d9 f7       	brne	.-10     	; 0x6f0 <__fixunssfsi+0x42>
 6fa:	3e f4       	brtc	.+14     	; 0x70a <__fixunssfsi+0x5c>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	08 95       	ret

0000070c <__floatunsisf>:
 70c:	e8 94       	clt
 70e:	09 c0       	rjmp	.+18     	; 0x722 <__floatsisf+0x12>

00000710 <__floatsisf>:
 710:	97 fb       	bst	r25, 7
 712:	3e f4       	brtc	.+14     	; 0x722 <__floatsisf+0x12>
 714:	90 95       	com	r25
 716:	80 95       	com	r24
 718:	70 95       	com	r23
 71a:	61 95       	neg	r22
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	99 23       	and	r25, r25
 724:	a9 f0       	breq	.+42     	; 0x750 <__floatsisf+0x40>
 726:	f9 2f       	mov	r31, r25
 728:	96 e9       	ldi	r25, 0x96	; 150
 72a:	bb 27       	eor	r27, r27
 72c:	93 95       	inc	r25
 72e:	f6 95       	lsr	r31
 730:	87 95       	ror	r24
 732:	77 95       	ror	r23
 734:	67 95       	ror	r22
 736:	b7 95       	ror	r27
 738:	f1 11       	cpse	r31, r1
 73a:	f8 cf       	rjmp	.-16     	; 0x72c <__floatsisf+0x1c>
 73c:	fa f4       	brpl	.+62     	; 0x77c <__floatsisf+0x6c>
 73e:	bb 0f       	add	r27, r27
 740:	11 f4       	brne	.+4      	; 0x746 <__floatsisf+0x36>
 742:	60 ff       	sbrs	r22, 0
 744:	1b c0       	rjmp	.+54     	; 0x77c <__floatsisf+0x6c>
 746:	6f 5f       	subi	r22, 0xFF	; 255
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	16 c0       	rjmp	.+44     	; 0x77c <__floatsisf+0x6c>
 750:	88 23       	and	r24, r24
 752:	11 f0       	breq	.+4      	; 0x758 <__floatsisf+0x48>
 754:	96 e9       	ldi	r25, 0x96	; 150
 756:	11 c0       	rjmp	.+34     	; 0x77a <__floatsisf+0x6a>
 758:	77 23       	and	r23, r23
 75a:	21 f0       	breq	.+8      	; 0x764 <__floatsisf+0x54>
 75c:	9e e8       	ldi	r25, 0x8E	; 142
 75e:	87 2f       	mov	r24, r23
 760:	76 2f       	mov	r23, r22
 762:	05 c0       	rjmp	.+10     	; 0x76e <__floatsisf+0x5e>
 764:	66 23       	and	r22, r22
 766:	71 f0       	breq	.+28     	; 0x784 <__floatsisf+0x74>
 768:	96 e8       	ldi	r25, 0x86	; 134
 76a:	86 2f       	mov	r24, r22
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	60 e0       	ldi	r22, 0x00	; 0
 770:	2a f0       	brmi	.+10     	; 0x77c <__floatsisf+0x6c>
 772:	9a 95       	dec	r25
 774:	66 0f       	add	r22, r22
 776:	77 1f       	adc	r23, r23
 778:	88 1f       	adc	r24, r24
 77a:	da f7       	brpl	.-10     	; 0x772 <__floatsisf+0x62>
 77c:	88 0f       	add	r24, r24
 77e:	96 95       	lsr	r25
 780:	87 95       	ror	r24
 782:	97 f9       	bld	r25, 7
 784:	08 95       	ret

00000786 <__fp_split3>:
 786:	57 fd       	sbrc	r21, 7
 788:	90 58       	subi	r25, 0x80	; 128
 78a:	44 0f       	add	r20, r20
 78c:	55 1f       	adc	r21, r21
 78e:	59 f0       	breq	.+22     	; 0x7a6 <__fp_splitA+0x10>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	71 f0       	breq	.+28     	; 0x7b0 <__fp_splitA+0x1a>
 794:	47 95       	ror	r20

00000796 <__fp_splitA>:
 796:	88 0f       	add	r24, r24
 798:	97 fb       	bst	r25, 7
 79a:	99 1f       	adc	r25, r25
 79c:	61 f0       	breq	.+24     	; 0x7b6 <__fp_splitA+0x20>
 79e:	9f 3f       	cpi	r25, 0xFF	; 255
 7a0:	79 f0       	breq	.+30     	; 0x7c0 <__fp_splitA+0x2a>
 7a2:	87 95       	ror	r24
 7a4:	08 95       	ret
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	14 06       	cpc	r1, r20
 7ac:	55 1f       	adc	r21, r21
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <__fp_split3+0xe>
 7b0:	46 95       	lsr	r20
 7b2:	f1 df       	rcall	.-30     	; 0x796 <__fp_splitA>
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <__fp_splitA+0x30>
 7b6:	16 16       	cp	r1, r22
 7b8:	17 06       	cpc	r1, r23
 7ba:	18 06       	cpc	r1, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	f1 cf       	rjmp	.-30     	; 0x7a2 <__fp_splitA+0xc>
 7c0:	86 95       	lsr	r24
 7c2:	71 05       	cpc	r23, r1
 7c4:	61 05       	cpc	r22, r1
 7c6:	08 94       	sec
 7c8:	08 95       	ret

000007ca <__fp_zero>:
 7ca:	e8 94       	clt

000007cc <__fp_szero>:
 7cc:	bb 27       	eor	r27, r27
 7ce:	66 27       	eor	r22, r22
 7d0:	77 27       	eor	r23, r23
 7d2:	cb 01       	movw	r24, r22
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__mulsf3>:
 7d8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__mulsf3x>
 7dc:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_round>
 7e0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_pscA>
 7e4:	38 f0       	brcs	.+14     	; 0x7f4 <__mulsf3+0x1c>
 7e6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fp_pscB>
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <__mulsf3+0x1c>
 7ec:	95 23       	and	r25, r21
 7ee:	11 f0       	breq	.+4      	; 0x7f4 <__mulsf3+0x1c>
 7f0:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_inf>
 7f4:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_nan>
 7f8:	11 24       	eor	r1, r1
 7fa:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>

000007fe <__mulsf3x>:
 7fe:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_split3>
 802:	70 f3       	brcs	.-36     	; 0x7e0 <__mulsf3+0x8>

00000804 <__mulsf3_pse>:
 804:	95 9f       	mul	r25, r21
 806:	c1 f3       	breq	.-16     	; 0x7f8 <__mulsf3+0x20>
 808:	95 0f       	add	r25, r21
 80a:	50 e0       	ldi	r21, 0x00	; 0
 80c:	55 1f       	adc	r21, r21
 80e:	62 9f       	mul	r22, r18
 810:	f0 01       	movw	r30, r0
 812:	72 9f       	mul	r23, r18
 814:	bb 27       	eor	r27, r27
 816:	f0 0d       	add	r31, r0
 818:	b1 1d       	adc	r27, r1
 81a:	63 9f       	mul	r22, r19
 81c:	aa 27       	eor	r26, r26
 81e:	f0 0d       	add	r31, r0
 820:	b1 1d       	adc	r27, r1
 822:	aa 1f       	adc	r26, r26
 824:	64 9f       	mul	r22, r20
 826:	66 27       	eor	r22, r22
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	66 1f       	adc	r22, r22
 82e:	82 9f       	mul	r24, r18
 830:	22 27       	eor	r18, r18
 832:	b0 0d       	add	r27, r0
 834:	a1 1d       	adc	r26, r1
 836:	62 1f       	adc	r22, r18
 838:	73 9f       	mul	r23, r19
 83a:	b0 0d       	add	r27, r0
 83c:	a1 1d       	adc	r26, r1
 83e:	62 1f       	adc	r22, r18
 840:	83 9f       	mul	r24, r19
 842:	a0 0d       	add	r26, r0
 844:	61 1d       	adc	r22, r1
 846:	22 1f       	adc	r18, r18
 848:	74 9f       	mul	r23, r20
 84a:	33 27       	eor	r19, r19
 84c:	a0 0d       	add	r26, r0
 84e:	61 1d       	adc	r22, r1
 850:	23 1f       	adc	r18, r19
 852:	84 9f       	mul	r24, r20
 854:	60 0d       	add	r22, r0
 856:	21 1d       	adc	r18, r1
 858:	82 2f       	mov	r24, r18
 85a:	76 2f       	mov	r23, r22
 85c:	6a 2f       	mov	r22, r26
 85e:	11 24       	eor	r1, r1
 860:	9f 57       	subi	r25, 0x7F	; 127
 862:	50 40       	sbci	r21, 0x00	; 0
 864:	9a f0       	brmi	.+38     	; 0x88c <__mulsf3_pse+0x88>
 866:	f1 f0       	breq	.+60     	; 0x8a4 <__mulsf3_pse+0xa0>
 868:	88 23       	and	r24, r24
 86a:	4a f0       	brmi	.+18     	; 0x87e <__mulsf3_pse+0x7a>
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	bb 1f       	adc	r27, r27
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	91 50       	subi	r25, 0x01	; 1
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	a9 f7       	brne	.-22     	; 0x868 <__mulsf3_pse+0x64>
 87e:	9e 3f       	cpi	r25, 0xFE	; 254
 880:	51 05       	cpc	r21, r1
 882:	80 f0       	brcs	.+32     	; 0x8a4 <__mulsf3_pse+0xa0>
 884:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_inf>
 888:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_szero>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	e4 f3       	brlt	.-8      	; 0x888 <__mulsf3_pse+0x84>
 890:	98 3e       	cpi	r25, 0xE8	; 232
 892:	d4 f3       	brlt	.-12     	; 0x888 <__mulsf3_pse+0x84>
 894:	86 95       	lsr	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b7 95       	ror	r27
 89c:	f7 95       	ror	r31
 89e:	e7 95       	ror	r30
 8a0:	9f 5f       	subi	r25, 0xFF	; 255
 8a2:	c1 f7       	brne	.-16     	; 0x894 <__mulsf3_pse+0x90>
 8a4:	fe 2b       	or	r31, r30
 8a6:	88 0f       	add	r24, r24
 8a8:	91 1d       	adc	r25, r1
 8aa:	96 95       	lsr	r25
 8ac:	87 95       	ror	r24
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret

000008b2 <__fp_inf>:
 8b2:	97 f9       	bld	r25, 7
 8b4:	9f 67       	ori	r25, 0x7F	; 127
 8b6:	80 e8       	ldi	r24, 0x80	; 128
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	60 e0       	ldi	r22, 0x00	; 0
 8bc:	08 95       	ret

000008be <__fp_nan>:
 8be:	9f ef       	ldi	r25, 0xFF	; 255
 8c0:	80 ec       	ldi	r24, 0xC0	; 192
 8c2:	08 95       	ret

000008c4 <__fp_pscA>:
 8c4:	00 24       	eor	r0, r0
 8c6:	0a 94       	dec	r0
 8c8:	16 16       	cp	r1, r22
 8ca:	17 06       	cpc	r1, r23
 8cc:	18 06       	cpc	r1, r24
 8ce:	09 06       	cpc	r0, r25
 8d0:	08 95       	ret

000008d2 <__fp_pscB>:
 8d2:	00 24       	eor	r0, r0
 8d4:	0a 94       	dec	r0
 8d6:	12 16       	cp	r1, r18
 8d8:	13 06       	cpc	r1, r19
 8da:	14 06       	cpc	r1, r20
 8dc:	05 06       	cpc	r0, r21
 8de:	08 95       	ret

000008e0 <__fp_round>:
 8e0:	09 2e       	mov	r0, r25
 8e2:	03 94       	inc	r0
 8e4:	00 0c       	add	r0, r0
 8e6:	11 f4       	brne	.+4      	; 0x8ec <__fp_round+0xc>
 8e8:	88 23       	and	r24, r24
 8ea:	52 f0       	brmi	.+20     	; 0x900 <__stack+0x1>
 8ec:	bb 0f       	add	r27, r27
 8ee:	40 f4       	brcc	.+16     	; 0x900 <__stack+0x1>
 8f0:	bf 2b       	or	r27, r31
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__fp_round+0x18>
 8f4:	60 ff       	sbrs	r22, 0
 8f6:	04 c0       	rjmp	.+8      	; 0x900 <__stack+0x1>
 8f8:	6f 5f       	subi	r22, 0xFF	; 255
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	8f 4f       	sbci	r24, 0xFF	; 255
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	08 95       	ret

00000902 <__umulhisi3>:
 902:	a2 9f       	mul	r26, r18
 904:	b0 01       	movw	r22, r0
 906:	b3 9f       	mul	r27, r19
 908:	c0 01       	movw	r24, r0
 90a:	a3 9f       	mul	r26, r19
 90c:	70 0d       	add	r23, r0
 90e:	81 1d       	adc	r24, r1
 910:	11 24       	eor	r1, r1
 912:	91 1d       	adc	r25, r1
 914:	b2 9f       	mul	r27, r18
 916:	70 0d       	add	r23, r0
 918:	81 1d       	adc	r24, r1
 91a:	11 24       	eor	r1, r1
 91c:	91 1d       	adc	r25, r1
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
